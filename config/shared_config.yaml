# config/shared_config.yaml

# --- General Settings ---
project_name: "RLTradingFramework"
python_version: "3.10" # Or your target version

# --- File Paths ---
# Base directories (can be relative to project root or absolute)
# Using relative paths for better portability
data_dir: "data"
model_dir: "models"
log_dir: "logs"
config_dir: "config" # For this file itself and potentially others
fundamental_analysis_dir: "Fundamental"

# Specific file/subdir names or patterns
# Data preprocessing pipeline paths
raw_stock_data_dir: "raw_stock_data" # Subdirectory under data_dir for raw ticker CSVs
processed_stock_data_dir: "processed_stock_data" # Subdirectory for per-ticker processed data
feature_engineered_data_dir: "feature_engineered_data" # Subdirectory for per-ticker feature data
final_combined_data_dir: "final_combined_data" # Subdirectory for merged data for env
macro_data_filename: "macro_economic_data.csv" # Under data_dir
processed_macro_filename: "processed_macro_economic_data.csv" # Under data_dir

# Model related paths
xgboost_model_filename: "xgboost_fundamental_model.bin" # Under model_dir or fundamental_analysis_dir
tensorboard_log_dir: "tensorboard_logs" # Under log_dir
checkpoint_dir: "checkpoints" # Under model_dir
best_model_dir: "best_model" # Under model_dir
vecnormalize_suffix: "_vecnormalize.pkl"
model_zip_suffix: ".zip"

# Output paths
backtest_output_dir: "backtest_results" # Under log_dir or a dedicated output_dir
trading_metrics_filename: "trading_environment_metrics.csv" # e.g., under log_dir

# --- Data Parameters ---
# Default tickers for training and processing
default_ticker_list:
  - "RELIANCE.NS"
  - "TCS.NS"
  - "INFY.NS"
  - "HDFCBANK.NS"
  - "ICICIBANK.NS"

# Date ranges (ISO format: YYYY-MM-DD)
default_start_date: "2019-01-01"
default_end_date: "2022-01-01" # End of training/start of validation
default_test_end_date: "2023-01-01" # End of test/evaluation period

# Technical indicators to be used.
# 'name' should correspond to a function in FeatureEngineer or a pandas-ta indicator name.
# 'params' are passed to the indicator function.
# 'output_columns' are the exact column name stems (lowercased) generated by FeatureEngineer/pandas-ta
# and then suffixed by DataMerger (e.g., 'sma_50_GOOG').
tech_indicator_list:
  - name: "sma" # Corresponds to FeatureEngineer.add_sma
    params: { window: 50 }
    output_columns: ["sma_50"]
  - name: "sma"
    params: { window: 200 }
    output_columns: ["sma_200"]
  - name: "ema" # Corresponds to FeatureEngineer.add_ema
    params: { window: 12 }
    output_columns: ["ema_12"]
  - name: "ema"
    params: { window: 26 }
    output_columns: ["ema_26"]
  - name: "macd" # Corresponds to FeatureEngineer.add_macd or direct pandas_ta.macd
    params: { fast: 12, slow: 26, signal: 9 } # Default pandas-ta params
    output_columns: ["macd_12_26_9", "macdh_12_26_9", "macds_12_26_9"]
  - name: "rsi" # Corresponds to FeatureEngineer.add_rsi or direct pandas_ta.rsi
    params: { window: 14 } # Default pandas-ta param
    output_columns: ["rsi_14"]
  - name: "cci" # Corresponds to FeatureEngineer.add_cci or direct pandas_ta.cci
    params: { window: 14, constant: 0.015 } # Default pandas-ta params
    output_columns: ["cci_14_0.015"]
  - name: "adx" # Corresponds to FeatureEngineer.add_adx or direct pandas_ta.adx
    params: { window: 14 } # Default pandas-ta param
    output_columns: ["adx_14", "dmp_14", "dmn_14"] # ADX, +DI, -DI
  - name: "obv" # Corresponds to FeatureEngineer.add_obv or direct pandas_ta.obv
    # params: {} # OBV usually doesn't take params other than close and volume
    output_columns: ["obv"]
  - name: "bollinger_bands" # Corresponds to FeatureEngineer.add_bollinger_bands
    params: { window: 20, num_std_dev: 2 } # Common params
    # output_columns from pandas-ta bbands: bbl_length_std, bbm_length_std, bbu_length_std, bbb_length_std, bbp_length_std
    # Assuming FeatureEngineer renames them or uses specific ones.
    # For now, let's assume FeatureEngineer uses these names or similar if directly calling pandas-ta:
    # If FeatureEngineer.add_bollinger_bands creates specific columns like 'bb_upper', 'bb_middle', 'bb_lower':
    output_columns: ["bb_lower_20_2.0", "bb_middle_20_2.0", "bb_upper_20_2.0", "bb_bandwidth_20_2.0", "bb_percent_20_2.0"]
    # Or if FeatureEngineer creates custom names like 'bb_upper', 'bb_middle', 'bb_lower' based on these:
    # output_columns: ["bb_lower", "bb_middle", "bb_upper"] # This depends on FeatureEngineer implementation.
    # The original list had "bb_upper", "bb_middle", "bb_lower" separately.
    # Let's assume FeatureEngineer is updated to produce these specific column names if it's not using pandas-ta's defaults directly.
    # Given the old list, it's more likely it was expecting individual columns.
    # This highlights the need for FeatureEngineer.py to align.
    # For now, I will use the pandas-ta default output column names for bbands with common params.
    # If `bb_upper`, `bb_middle`, `bb_lower` were meant to be separate entries, the config needs to reflect that.
    # Let's assume the old list implied the *components* of Bollinger Bands and Stochastic.
  - name: "stochastic_oscillator" # Corresponds to FeatureEngineer.add_stochastic_oscillator
    params: { k_window: 14, d_window: 3, smooth_window: 3 } # Common params for %K, %D
    # pandas-ta stoch output: STOCHk_14_3_3, STOCHd_14_3_3
    output_columns: ["stochk_14_3_3", "stochd_14_3_3"]
  - name: "volume_sma" # Corresponds to FeatureEngineer.add_volume_sma
    params: { window: 20 }
    output_columns: ["volsma_20"]

# Macroeconomic features expected
macro_feature_list:
  - "snp500" # Example, adjust to actual data source
  - "gold_price"
  - "interest_rate"
  # - "vix" # Example: Volatility Index

# --- Trading Environment Parameters (MultiStockTradingEnv) ---
initial_amount: 100000.0
# Buy/Sell costs can be a single value applied to all, or per-stock if needed
# For simplicity, a single value is often fine, or a list matching num_stocks
buy_cost_pct: 0.001 # Applied per stock
sell_cost_pct: 0.001 # Applied per stock
hmax_per_stock: 1000 # Max shares to trade per transaction, per stock
reward_scaling: 0.0001 # Scales the raw reward from the environment
lookback_window: 30 # Days for observation window / some TA calculations
max_steps_per_episode: 2000 # Max steps in an episode, can be data length
stop_loss_threshold: 0.15 # e.g., 15%
risk_penalty: 0.0005 # General risk penalty in reward function (example)

# Reward function parameters
# The reward function in trading_env.py has been simplified to: change in portfolio value.
# Most parameters below are for the original, more complex reward structure and are currently NOT USED
# by the simplified reward. They are kept for potential future experimentation.
reward_params:
  lookback_window: 30 # Still potentially used for general metrics like volatility in info dict
  debug: false # General debug flag for environment printouts
  # ---- Parameters for the (now commented out) complex reward function ----
  # k_p: 2.0
  # k_l: 0.5
  # gamma: 4.0
  # alpha: 1.5
  # beta: 1.5
  # lambda: 0.5
  # w_risk: 0.1
  # w_drawdown: 0.1
  # w_action: 0.05
  # phi: [0.05, 0.05, 0.05, 0.05]
  # epsilon: 0.05
  # weight_min: 0.05
  # k_a: 0.05
  # eta: 0.3
  # r_threshold: 0.05
  # reward_scaling_factor: 100.0 # This was for the complex reward's internal scaling
  # k_d: 0.2
  # delta: 1.2
  # rho: 0.1
  # k_r: 0.1
  # fixed_reward_weights: {'w_profit': 0.7, 'w_risk': 0.1, 'w_drawdown': 0.1, 'w_action': 0.1}

# --- Model Training Parameters (SB3 Agents) ---
# Common SB3 params
default_policy: "MlpPolicy" # e.g., "MlpPolicy", "CnnPolicy", "MultiInputPolicy"
default_total_timesteps: 50000
default_n_eval_episodes: 5
default_eval_freq: 10000 # Steps

# PPO specific
ppo:
  n_steps: 1024
  batch_size: 64
  learning_rate: 0.0003
  ent_coef: 0.0
  gae_lambda: 0.95
  policy_kwargs:
    net_arch:
      - pi: [128, 128]
        vf: [128, 128]

# TD3 specific
td3:
  learning_rate: 0.0003
  batch_size: 128
  buffer_size: 1000000
  gamma: 0.99
  tau: 0.005
  policy_delay: 2
  action_noise: # Parameters for NormalActionNoise or OrnsteinUhlenbeckActionNoise
    type: "NormalActionNoise" # or "OrnsteinUhlenbeckActionNoise"
    mean: 0.0 # Single value or list per action dim
    sigma: 0.1 # Single value or list per action dim
  policy_kwargs:
    net_arch: [400, 300] # Example for TD3, often a simple list

# RecurrentPPO specific (if used from sb3_contrib)
recurrent_ppo:
  policy: "LstmPolicy" # Or MlpLstmPolicy
  n_steps: 2048
  batch_size: 128
  learning_rate: 0.0003
  gamma: 0.99
  gae_lambda: 0.95
  ent_coef: 0.01
  max_grad_norm: 0.5
  policy_kwargs:
    net_arch: # For RecurrentPPO, net_arch might be empty if using default shared, or specify pi, vf layers
      # Example:
      # - pi: [128]
      #   vf: [128]
    lstm_hidden_size: 128
    # enable_critic_lstm: True # Example if you want LSTM for critic too

# Add other algorithms (A2C, DDPG) as needed

# --- Streamlit App Configuration ---
streamlit_app_title: "RL Trading Dashboard"
# Any other app-specific settings

# --- Fundamental Analysis ---
nifty_url: "https://archives.nseindia.com/content/indices/ind_nifty500list.csv" # URL for NIFTY 500 list
fundamental_num_stocks_to_select: 20 # Number of stocks to select based on fundamental model
fundamental_num_stocks_to_process: 200 # Number of nifty stocks to get data for to train fundamental model
